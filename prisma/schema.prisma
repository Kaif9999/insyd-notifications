generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  
  blogs         Blog[]
  jobs          Job[]
  notifications Notification[]
  blogLikes     BlogLike[]
  jobApplications JobApplication[]
  
  // Follow relationships
  following     Follow[] @relation("UserFollowing")
  followers     Follow[] @relation("UserFollowers")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  
  follower    User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([followerId, followingId])
}

model Job {
  id           String   @id @default(cuid())
  title        String
  company      String
  authorId     String
  
  author       User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  applications JobApplication[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     BlogLike[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String  @id @default(cuid())
  title       String
  message     String
  read        Boolean @default(false)
  type        String
  userId      String
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
}

model BlogLike {
  id     String @id @default(cuid())
  userId String
  blogId String
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, blogId])
}

model JobApplication {
  id     String @id @default(cuid())
  userId String
  jobId  String
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job    Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, jobId])
}
